#pragma once
#include "ML_D3DFilter.h"
#include "ML_Shader.h"

class laplacian_sharpSegment : public ML_Shader
{
public:
	//AdaptHistEqShader
	laplacian_sharpSegment(IDirect3DDevice9Ex*device) :ML_Shader(device, AdaptHistEqShader)
	{
	}
	HRESULT ApplyParameter() override
	{
		SetFloat("degree", context.degree);
		SetFloatArray("iResolution", TextureSize, 2);
		return E_NOTIMPL;
	}
	HRESULT SetParameter(void * param) override
	{
		context = *(ImageEnhanceContext*)param;
		return 0;
	}
private:
	ImageEnhanceContext context;
	inline const static uint8_t AdaptHistEqShader[600] = {
	0x00, 0x03, 0xFF, 0xFF, 0xFE, 0xFF, 0x38, 0x00, 0x43, 0x54, 0x41, 0x42, 0x1C, 0x00, 0x00, 0x00,
	0xB3, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0xAC, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x8C, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x9C, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x00, 0xAB, 0x00, 0x00, 0x03, 0x00,
	0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x52, 0x65, 0x73,
	0x6F, 0x6C, 0x75, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x02, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x6E, 0x70, 0x75, 0x74, 0x74, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x00, 0xAB, 0xAB, 0xAB, 0x04, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x01, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x73, 0x5F, 0x33, 0x5F, 0x30, 0x00, 0x4D,
	0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4C, 0x53,
	0x4C, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x20, 0x43, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65,
	0x72, 0x20, 0x31, 0x30, 0x2E, 0x31, 0x00, 0xAB, 0x51, 0x00, 0x00, 0x05, 0x02, 0x00, 0x0F, 0xA0,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x0A, 0xD7, 0x23, 0x3C, 0x00, 0x00, 0x80, 0x3F,
	0x1F, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x80, 0x00, 0x00, 0x03, 0x90, 0x1F, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x90, 0x00, 0x08, 0x0F, 0xA0, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x0A, 0x80,
	0x02, 0x00, 0x00, 0xA0, 0x06, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0xA0,
	0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0xAA, 0x81, 0x02, 0x00, 0x00, 0x03,
	0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0xE4, 0x80, 0x00, 0x00, 0x44, 0x90, 0x42, 0x00, 0x00, 0x03,
	0x01, 0x00, 0x0F, 0x80, 0x00, 0x00, 0xE4, 0x80, 0x00, 0x08, 0xE4, 0xA0, 0x42, 0x00, 0x00, 0x03,
	0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0xEE, 0x80, 0x00, 0x08, 0xE4, 0xA0, 0x42, 0x00, 0x00, 0x03,
	0x02, 0x00, 0x0F, 0x80, 0x00, 0x00, 0xE4, 0x90, 0x00, 0x08, 0xE4, 0xA0, 0x04, 0x00, 0x00, 0x04,
	0x01, 0x00, 0x07, 0x80, 0x02, 0x00, 0xE4, 0x80, 0x02, 0x00, 0x55, 0xA0, 0x01, 0x00, 0xE4, 0x81,
	0x06, 0x00, 0x00, 0x02, 0x03, 0x00, 0x01, 0x80, 0x00, 0x00, 0x55, 0xA0, 0x01, 0x00, 0x00, 0x02,
	0x03, 0x00, 0x02, 0x80, 0x02, 0x00, 0x00, 0xA0, 0x02, 0x00, 0x00, 0x03, 0x04, 0x00, 0x03, 0x80,
	0x03, 0x00, 0xE1, 0x80, 0x00, 0x00, 0xE4, 0x90, 0x01, 0x00, 0x00, 0x02, 0x03, 0x00, 0x04, 0x80,
	0x03, 0x00, 0x00, 0x81, 0x02, 0x00, 0x00, 0x03, 0x03, 0x00, 0x03, 0x80, 0x03, 0x00, 0xE9, 0x80,
	0x00, 0x00, 0xE4, 0x90, 0x42, 0x00, 0x00, 0x03, 0x03, 0x00, 0x0F, 0x80, 0x03, 0x00, 0xE4, 0x80,
	0x00, 0x08, 0xE4, 0xA0, 0x42, 0x00, 0x00, 0x03, 0x04, 0x00, 0x0F, 0x80, 0x04, 0x00, 0xE4, 0x80,
	0x00, 0x08, 0xE4, 0xA0, 0x02, 0x00, 0x00, 0x03, 0x01, 0x00, 0x07, 0x80, 0x01, 0x00, 0xE4, 0x80,
	0x04, 0x00, 0xE4, 0x81, 0x02, 0x00, 0x00, 0x03, 0x01, 0x00, 0x07, 0x80, 0x03, 0x00, 0xE4, 0x81,
	0x01, 0x00, 0xE4, 0x80, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0xE4, 0x81,
	0x01, 0x00, 0xE4, 0x80, 0x05, 0x00, 0x00, 0x03, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0xE4, 0x80,
	0x01, 0x00, 0x00, 0xA0, 0x04, 0x00, 0x00, 0x04, 0x00, 0x08, 0x07, 0x80, 0x00, 0x00, 0xE4, 0x80,
	0x02, 0x00, 0xAA, 0xA0, 0x02, 0x00, 0xE4, 0x80, 0x01, 0x00, 0x00, 0x02, 0x00, 0x08, 0x08, 0x80,
	0x02, 0x00, 0xFF, 0xA0, 0xFF, 0xFF, 0x00, 0x00
	};
};

class ImageEnhanceFilter :public D3DFilter
{
	inline const static uint8_t ImageEnahnceShader[404] = {
	0x00, 0x03, 0xFF, 0xFF, 0xFE, 0xFF, 0x2D, 0x00, 0x43, 0x54, 0x41, 0x42, 0x1C, 0x00, 0x00, 0x00,
	0x87, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x02, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
	0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x06, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x69, 0x6E, 0x70, 0x75, 0x74, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0xAB, 0xAB, 0xAB,
	0x04, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x6C, 0x75, 0x74, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0xAB, 0x04, 0x00, 0x0C, 0x00,
	0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x73, 0x5F, 0x33,
	0x5F, 0x30, 0x00, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74, 0x20, 0x28, 0x52, 0x29,
	0x20, 0x48, 0x4C, 0x53, 0x4C, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x20, 0x43, 0x6F, 0x6D,
	0x70, 0x69, 0x6C, 0x65, 0x72, 0x20, 0x31, 0x30, 0x2E, 0x31, 0x00, 0xAB, 0x51, 0x00, 0x00, 0x05,
	0x00, 0x00, 0x0F, 0xA0, 0x58, 0xFF, 0x7F, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x81, 0x80, 0x80, 0x3B,
	0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x80, 0x00, 0x00, 0x03, 0x90,
	0x1F, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x90, 0x00, 0x08, 0x0F, 0xA0, 0x1F, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x90, 0x01, 0x08, 0x0F, 0xA0, 0x42, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0F, 0x80,
	0x00, 0x00, 0xE4, 0x90, 0x00, 0x08, 0xE4, 0xA0, 0x0A, 0x00, 0x00, 0x03, 0x01, 0x00, 0x07, 0x80,
	0x00, 0x00, 0xE4, 0x80, 0x00, 0x00, 0x00, 0xA0, 0x01, 0x00, 0x00, 0x02, 0x00, 0x08, 0x08, 0x80,
	0x00, 0x00, 0xFF, 0x80, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x08, 0x80, 0x00, 0x00, 0x55, 0xA0,
	0x42, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0F, 0x80, 0x01, 0x00, 0xEC, 0x80, 0x01, 0x08, 0xE4, 0xA0,
	0x05, 0x00, 0x00, 0x03, 0x00, 0x08, 0x01, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xAA, 0xA0,
	0x42, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0F, 0x80, 0x01, 0x00, 0xED, 0x80, 0x01, 0x08, 0xE4, 0xA0,
	0x42, 0x00, 0x00, 0x03, 0x01, 0x00, 0x0F, 0x80, 0x01, 0x00, 0xEE, 0x80, 0x01, 0x08, 0xE4, 0xA0,
	0x05, 0x00, 0x00, 0x03, 0x00, 0x08, 0x04, 0x80, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0xAA, 0xA0,
	0x05, 0x00, 0x00, 0x03, 0x00, 0x08, 0x02, 0x80, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0xAA, 0xA0,
	0xFF, 0xFF, 0x00, 0x00
};

	ImageEnhanceContext context;
public:

	ImageEnhanceFilter(IDirect3DDevice9Ex*device) :D3DFilter(device)
	{
		AddShader( new ML_Shader(device, ImageEnahnceShader));
		AddShader(new laplacian_sharpSegment(device));
	}

	virtual HRESULT SetParameter(void * param) override
	{
		context = *(ImageEnhanceContext*)param;
		return D3DFilter::SetParameter(param);
	}
	void Render(std::vector<FilterFrame> frames, int width, int height, unsigned char* output = NULL) override
	{
		float lut[256] = { 0};
		rgbtolut(frames[0].data, width * height, lut);
		FilterFrame lutframe = { (unsigned char*)lut,256,1 ,"luttexture",1024};
		D3DFilter::Render({ frames[0], lutframe}, width, height, NULL);
	}
private:


	void rgbtolut(BYTE* imageA, long imagesize, float * lut) {
		UINT hist[256] = { 0 };
		for (BYTE* p = imageA; p <= imageA + imagesize * 4; p += 4)
		{
			++* (hist + *p);
			++* (hist + p[1]);
			++* (hist + p[2]);
		}
		//²Ã¼ô²Ù×÷ 
		int average = imagesize * 3 / 255;
		int LIMIT = this->context.threshold * average;
		int steal = 0;
		for (int k = 0; k < 256; k++)
		{
			if (hist[k] > LIMIT) {
				steal += hist[k] - LIMIT;
				hist[k] = LIMIT;
			}
		}
		int bonus = steal / 256;
		//hand out the steals averagely  
		for (int k = 0; k < 256; k++)
		{
			hist[k] += bonus;
		}

		int sum = 0;
		for (int i = 0; i < 256; i++)
		{
			sum += hist[i];
			lut[i] = ((float)sum * 255.0) / (imagesize * 3);
		}
	}
};
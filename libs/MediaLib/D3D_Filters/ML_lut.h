#pragma once
#include "ML_D3DFilter.h"
#include "ML_Shader.h"


class lutFilter;
class lutFilterSegment : public ML_Shader
{
public:
	lutFilterSegment(IDirect3DDevice9Ex* device);
	lutFilterSegment(IDirect3DDevice9Ex* device, lutFilter* pLeader);

	HRESULT ApplyParameter();
	HRESULT SetParameter(void* param);
private:
	LutContext context;
	lutFilter* const m_pleader;
	inline const static uint8_t lutShader[264] = {
	0x00, 0x03, 0xFF, 0xFF, 0xFE, 0xFF, 0x2E, 0x00, 0x43, 0x54, 0x41, 0x42, 0x1C, 0x00, 0x00, 0x00,
	0x8B, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x02, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00,
	0x00, 0x01, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x02, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00,
	0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x69, 0x6E, 0x70, 0x75, 0x74, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0xAB, 0xAB, 0xAB,
	0x04, 0x00, 0x0C, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x69, 0x6E, 0x70, 0x75, 0x74, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x62, 0x00, 0xAB, 0xAB,
	0x04, 0x00, 0x0D, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x70, 0x73, 0x5F, 0x33, 0x5F, 0x30, 0x00, 0x4D, 0x69, 0x63, 0x72, 0x6F, 0x73, 0x6F, 0x66, 0x74,
	0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4C, 0x53, 0x4C, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72,
	0x20, 0x43, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65, 0x72, 0x20, 0x31, 0x30, 0x2E, 0x31, 0x00, 0xAB,
	0x1F, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x80, 0x00, 0x00, 0x03, 0x90, 0x1F, 0x00, 0x00, 0x02,
	0x00, 0x00, 0x00, 0x90, 0x00, 0x08, 0x0F, 0xA0, 0x1F, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xA0,
	0x01, 0x08, 0x0F, 0xA0, 0x42, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0F, 0x80, 0x00, 0x00, 0xE4, 0x90,
	0x00, 0x08, 0xE4, 0xA0, 0x42, 0x00, 0x00, 0x03, 0x00, 0x08, 0x0F, 0x80, 0x00, 0x00, 0xE4, 0x80,
	0x01, 0x08, 0xE4, 0xA0, 0xFF, 0xFF, 0x00, 0x00
	};
};
// 
class lutFilter :public D3DFilter
{
	struct _stLutData
	{
		std::shared_ptr<BYTE> m_pLutData;
		int width;
		int height;
		int depth;
	};
public:
	lutFilter(IDirect3DDevice9Ex* device);
	bool setLutData(const char* path);
public:
	void Render(std::vector<FilterFrame> frames, int width, int height, unsigned char* output) override;
private:
	_stLutData m_stLutData;
};
